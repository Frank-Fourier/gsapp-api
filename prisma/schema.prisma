generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipologiaRitenuta {
  QUATTRO
  VENTI
  VENTITRE
  ZERO
}

enum CausaliSomme {
  AUTONOMO
  CU
  MONOMANDATARIO
  PLURIMANDATARIO
  COMMISSIONARIO
  MEDIATORE
  PROCACCIATORE
  APPALTATORE
  DIVERSI
  OCCASIONALE
  PROFESSIONISTA
}

enum TipologiaCondominio {
  PREVALENZA_RESIDENZIALE
  STANDARD
  RESIDENZIALE
  COMMERCIALE
  PREVALENZA_COMMERCIALE
  SUPER
  MINIMO
  MULTIPROPREITA
}

enum TipologiaAnagrafica {
  FISICA
  GIURIDICAPERSONE
  GIURIDICACAPITALI
}

enum TipologiaCassa {
  QUATTRO
  CINQUE
  ZERO
}

enum TipologiaIVA {
  ZERO
  QUATTRO
  DIECI
  VENTIDUE
}

enum TipologiaImmobile {
  A1
  A2
  A3
  A4
  A5
  A6
  A7
  A8
  A9
  A10
  A11
  B1
  B2
  B3
  B4
  B5
  B6
  B7
  B8
  C1
  C2
  C3
  C4
  C5
  C6
  C7
  D1
  D2
  D3
  D4
  D5
  D6
  D7
  D8
  D9
  D10
  E1
  E2
  E3
  E4
  E5
  E6
  E7
  E8
  E9
}

enum TipologiaFondo {
  CASSA
  SPECIALI
  TFR
}

enum TipologiaGestione {
  ORDINARIA
  STRAORDINARIA
  UTENZE_PRIVATE
}

enum TipologiaMovimento {
  DEBITO
  CREDITO
}

model ProfiloAmministratore {
  id          Int          @id @default(autoincrement())
  nome        String
  cognome     String
  email       String
  password    String
  documenti   String[]
  allegati    String[]
  logo        String
  stato       Boolean      @default(false)
  anagrafiche Anagrafica[]
  fornitori   Fornitore[]
  dipendenti  Dipendente[]
  condomini   Condominio[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Anagrafica {
  id                 Int                   @id @default(autoincrement())
  email              String
  emailPec           String
  tipologia          TipologiaAnagrafica
  nome               String
  cognome            String
  ragioneSociale     String? //se societa
  responsabile       String?
  codiceFiscale      String
  partitaIva         String
  nazioneResidenza   String
  comuneResidenza    String
  indirizzoResidenza String
  capResidenza       String
  nazioneDomicilio   String?
  comuneDomicilio    String?
  indirizzoDomicilio String?
  capDomicilio       String?
  dataNascita        DateTime
  luogoNascita       String
  telefono           String
  cellulare          String
  note               String
  documenti          String[]
  allegati           String[]
  amministratoreId   Int
  amministratore     ProfiloAmministratore @relation(fields: [amministratoreId], references: [id])
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
}

model Fornitore {
  id                  Int                   @id @default(autoincrement())
  email               String
  emailPec            String
  tipologia           TipologiaAnagrafica
  nome                String
  cognome             String
  ragioneSociale      String? //se societa
  responsabile        String?
  codiceFiscale       String //controllo
  partitaIva          String //controllo
  nazioneResidenza    String
  comuneResidenza     String
  indirizzoResidenza  String
  capResidenza        String
  nazioneDomicilio    String?
  comuneDomicilio     String?
  indirizzoDomicilio  String?
  capDomicilio        String?
  nazioneSedeLegale   String
  comuneSedeLegale    String
  indirizzoSedeLegale String
  capSedeLegale       String
  dataNascita         DateTime
  luogoNascita        String
  telefono            String //controllo
  cellulare           String //controllo
  note                String
  nomeBanca           String
  iban                String
  cassaPrevidenza     TipologiaCassa
  inps                String?
  iva1                TipologiaIVA?         @default(ZERO)
  iva2                TipologiaIVA?
  iva3                TipologiaIVA?
  tipoRitenuta        TipologiaRitenuta
  causaliSommeErogate CausaliSomme
  cciaa               String?
  inail               String?
  albo                String?
  documenti           String[]
  allegati            String[]
  amministratoreId    Int
  amministratore      ProfiloAmministratore @relation(fields: [amministratoreId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Dipendente {
  id                  Int                   @id @default(autoincrement())
  email               String
  emailPec            String
  nome                String
  cognome             String
  codiceFiscale       String //controllo
  nazioneResidenza    String
  comuneResidenza     String
  indirizzoResidenza  String
  capResidenza        String
  nazioneDomicilio    String?
  comuneDomicilio     String?
  indirizzoDomicilio  String?
  capDomicilio        String?
  dataNascita         DateTime
  luogoNascita        String
  telefono            String //controllo
  cellulare           String //controllo
  note                String
  nomeBanca           String
  iban                String
  causaliSommeErogate CausaliSomme
  documenti           String[]
  allegati            String[]
  amministratoreId    Int
  amministratore      ProfiloAmministratore @relation(fields: [amministratoreId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Condominio {
  id                Int                   @id @default(autoincrement())
  codice            String?               @unique
  tipologia         TipologiaCondominio
  denominazione     String
  codiceFiscale     String
  comune            String
  indirizzo         String
  cap               String
  sezioneUrbana     String
  foglio            Int
  particella        Int
  totalSuperficie   Float // derivato
  totaleUnita       Int // derivato
  totaleVani        Float // derivato
  posizioneINPS     String
  posizioneINAIL    String
  luogoAssemblea1   String
  luogoAssemblea2   String
  decimaliMillesimi Int
  descrizione       String?
  note              String?
  allegati          String[]
  dataPresaInCarico DateTime
  dataFineInCarico  DateTime? // se presente il condominio è chiuso
  amministratoreId  Int
  amministratore    ProfiloAmministratore @relation(fields: [amministratoreId], references: [id])
  unitaImmobiliari  UnitaImmobiliare[]
  tabelle           Tabella[]
  contiMastro       ContoMastro[]
  risorse           Risorsa[]
  fondi             Fondo[]
  transazioni       Transazione[]
  movimenti         Movimento[]
  gestioni          Gestione[] //if no elements then it is the first gestione iniziale
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model UnitaImmobiliare {
  id                      Int               @id @default(autoincrement())
  tipologia               TipologiaImmobile
  subalterno              String
  superficie              Float
  vani                    Int
  scala                   String
  piano                   String
  interno                 String
  descrizione             String?
  note                    String?
  nudaProprietaAttiva     String[] //Struct with data start
  usufruttoAttivo         String[] //Struct with data start
  proprietarioAttivo      String[] //Struct with data start
  nudaProprietaPrecedente String[] //Struct with data start (optional) and end 
  usufruttoPrecendente    String[] //Struct with data start (optional) and end
  proprietarioPrecedente  String[] //Struct with data start (optional) and end
  conduttorePrecedente    String[] //Struct with data start (optional) and end
  dataDiAttivazione       DateTime
  dataDiDisattivazione    DateTime? // se presente allora l' unita immobiliare è archiviata
  condominioId            Int
  condominio              Condominio        @relation(fields: [condominioId], references: [id])
  transazioni             Transazione[]
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
}

model Tabella {
  id                       Int           @id @default(autoincrement())
  denominazione            String
  totaleMillesimi          Float
  ripartizioneMillesimi    Float[]
  percentualeNudaProprieta String[]
  percentualeUsufrutto     String[]
  percentualeProprieta     String[]
  percentualeConduttore    String[]
  dataArchiviazione        DateTime? // se presente allora la tabella è archiviata
  descrizione              String?
  note                     String?
  condominioId             Int
  condominio               Condominio    @relation(fields: [condominioId], references: [id])
  contiMastro              ContoMastro[]
  updatedAt                DateTime      @updatedAt
  createdAt                DateTime      @default(now())
}

model ContoMastro {
  id                Int          @id @default(autoincrement())
  denominazione     String
  descrizione       String?
  note              String?
  tabellaId         Int
  tabella           Tabella      @relation(fields: [tabellaId], references: [id])
  conti             String[]
  dataArchiviazione DateTime? // se presente allora il conto mastro è archiviato
  condominioId      Int
  condominio        Condominio   @relation(fields: [condominioId], references: [id])
  preventivi        Preventivo[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Risorsa {
  id                Int             @id @default(autoincrement())
  saldo             Float
  denominazione     String
  descrizione       String?
  istitutoCredito   String
  agenzia           String?
  iban              String?
  codiceBIC         String?
  note              String?
  dataArchiviazione DateTime? // se presente allora la risorsa è archiviata
  condominioId      Int
  condominio        Condominio      @relation(fields: [condominioId], references: [id])
  transazioni       Transazione[]
  estrattiConto     EstrattoConto[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Fondo {
  id                Int             @id @default(autoincrement())
  saldo             Float
  tipologia         TipologiaFondo
  denominazione     String
  descrizione       String?
  note              String?
  dataArchiviazione DateTime? // se presente allora il fondo è archiviato
  condominioId      Int
  condominio        Condominio      @relation(fields: [condominioId], references: [id])
  transazioni       Transazione[]
  estrattiConto     EstrattoConto[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model EstrattoConto {
  id            Int      @id @default(autoincrement())
  saldo         Float
  denominazione String
  descrizione   String?
  note          String?
  transazioni   String[] // array di id delle transazioni
  risorsaId     Int?
  risorsa       Risorsa? @relation(fields: [risorsaId], references: [id])
  fondoId       Int?
  fondo         Fondo?   @relation(fields: [fondoId], references: [id])
  gestioneId    Int
  gestione      Gestione @relation(fields: [gestioneId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Transazione {
  id                     Int               @id @default(autoincrement())
  data                   DateTime
  importo                Float
  descrizione            String?
  note                   String?
  riferimento            String?
  provenienzaFornitore   String?
  provenienzaAnagrafica  String?
  destinazioneFornitore  String?
  destinazioneAnagrafica String?
  gestioneId             Int?
  gestione               Gestione?         @relation(fields: [gestioneId], references: [id])
  condominioId           Int
  condominio             Condominio        @relation(fields: [condominioId], references: [id])
  unitaImmobiliareId     Int?
  unitaImmobiliare       UnitaImmobiliare? @relation(fields: [unitaImmobiliareId], references: [id])
  risorsaId              Int
  risorsa                Risorsa           @relation(fields: [risorsaId], references: [id])
  fondoId                Int?
  fondo                  Fondo?            @relation(fields: [fondoId], references: [id])
  movimentoId            Int?
  movimento              Movimento?        @relation(fields: [movimentoId], references: [id])
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

model Movimento {
  id                      Int                @id @default(autoincrement())
  tipologia               TipologiaMovimento
  dataScadenza            DateTime
  dataEmissione           DateTime
  dataPagamento           DateTime? // se null non pagato debito o credito
  ritenuta                Float              @default(0)
  importo                 Float
  descrizione             String?
  note                    String?
  risorsaId               Int? // quando pagata si aggiunge la risorsa
  unitaImmobiliareId      Int? // se è una rata
  fornitoreId             Int? // se è una fattura
  dipendenteId            Int? // se è una busta paga
  transazione             Transazione[]
  condominioId            Int
  condominio              Condominio         @relation(fields: [condominioId], references: [id])
  gestioneId     Int?
  gestione                Gestione?          @relation("GestioneMovimento", fields: [gestioneId], references: [id])
  gestioneAssociations    GestioneMovimento[]
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
}

// una nuova gestione importa tutti i debiti e crediti con il dettaglio della gestione precedente o iniziale
// se esiste una relazione con una gestione precedente allora in fase di creazione della nuova gestione
// si importano i dati patrimoniali della gestione precedente, come gestire questo in prisma?
// quindi se non esiste una gestione precedente allora sono i dati patrimoniali iniziali
// se una gestione ha una data di fine allora è una gestione archiviata
// una gestione archiviata non può essere modificata ... da definire

model Gestione {
  id                      Int                @id @default(autoincrement())
  gestionePrecedenteId    Int? //riferimento ad una gestione precedente //se non esiste allora sono i dati patrimoniali iniziali
  gestionePrecedente      Gestione?          @relation("GestionePrecedente", fields: [gestionePrecedenteId], references: [id])
  tipologia               TipologiaGestione
  movimenti               Movimento[]        @relation("GestioneMovimento")
  estrattiConto           EstrattoConto[]
  dataInizioGestione      DateTime
  dataFineGestione        DateTime? // se presente allora la gestione è archiviata
  preventivi              Preventivo[]
  denominazione           String
  descrizione             String?
  note                    String?
  condominioId            Int
  condominio              Condominio         @relation(fields: [condominioId], references: [id])
  transazioni             Transazione[]
  gestioneAssociations    GestioneMovimento[]
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  Gestione                Gestione[]         @relation("GestionePrecedente")
}

model GestioneMovimento {
  gestioneId              Int
  movimentoId             Int
  gestione                Gestione  @relation(fields: [gestioneId], references: [id])
  movimento               Movimento @relation(fields: [movimentoId], references: [id])
  @@id([gestioneId, movimentoId])
}

// ogni preventivo generato è legato ad una gestione e ad un conto mastro
// di conseguenza ogni preventivo è legato ad una tabella
// e quindi grazie alla tabella definisce la ripartizione delle rate per unita immobiliare
model Preventivo {
  id            Int         @id @default(autoincrement())
  gestioneId    Int // riferimento a Gestione
  gestione      Gestione    @relation(fields: [gestioneId], references: [id])
  contoMastroId Int // riferimento a ContoMastro
  contoMastro   ContoMastro @relation(fields: [contoMastroId], references: [id])
  importo       Float
  numeroRate    Int
  descrizione   String?
  note          String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
